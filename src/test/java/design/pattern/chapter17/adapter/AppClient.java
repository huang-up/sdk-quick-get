package design.pattern.chapter17.adapter;

/**
 * 适配器模式：将一个类的接口转换为客户希望的另外一个接口。
 * Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
 *
 * 在软件开发中，系统的数据和行为都正确，但接口不符时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象
 * 与某个接口匹配。
 * 适配器模式主要应用于希望复用一些现存的类，但是接口又与复用环境要求不一致的情况，比如在需要对早期代码复用一些功能等应用上很有实际价值。
 *
 * 在 GoF 的设计模式中，对适配器模式讲了两种类型，类适配器模式和对象适配器模式，由于类适配器模式通过多重继承对一个接口与另一个接口
 * 进行匹配，而 C#、VB.NET、JAVA 等语言都不支持多重继承（C++支持），也就是一个类只有一个父亲，所以我们这里主要讲的是对象适配器。
 *
 * 何时使用：
 * 在想使用一个已经存在的类，但如果它的接口，也就是它的方法和你的要求不相同时，就应该考虑适配器模式。
 * 两个类做的事情相同或类似，但是具有不同的接口时要使用它。
 * 在双方都不太容易修改的时候再使用适配器模式适配。而不是一有不同时就使用它。那有没有设计之初就需要考虑用适配器模式的呢？
 * 当然有，比如公司设计一系统时考虑使用第三方开发组件，而这个组件的接口与我们自己的系统接口是不同的，而我们也完全没有必要
 * 为了迎合它而改动自己的接口，此时尽管是在开发的设计阶段，也是可以考虑用适配器模式来解决接口的问题。
 *
 * 客户代码可以统一调用同一接口就行了，这样应该可以更简单、更直接、更紧凑。
 *
 * Created by h on 2017/10/14.
 */
public class AppClient {
    public static void main(String[] args) {
        Player b = new Forwards("巴蒂尔");
        b.attack();
        Player m = new Guards("麦克格雷迪");
        m.attack();
        Player ym = new Translator("姚明");
        ym.attack();
        ym.defence();
    }
}
